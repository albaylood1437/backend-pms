
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.16.1
 * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
 */
Prisma.prismaVersion = {
  client: "2.16.1",
  engine: "cf0680a1bfe8d5e743dc659cc7f08009f9587d58"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.DepartmentScalarFieldEnum = makeEnum({
  departmentId: 'departmentId',
  departmentName: 'departmentName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GarageScalarFieldEnum = makeEnum({
  garageId: 'garageId',
  garageName: 'garageName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ItemPartScalarFieldEnum = makeEnum({
  itemPart: 'itemPart',
  partName: 'partName',
  partQuantity: 'partQuantity',
  partPrice: 'partPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  supplierId: 'supplierId'
});

exports.Prisma.PartScalarFieldEnum = makeEnum({
  partId: 'partId',
  partName: 'partName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ServiceExpenseScalarFieldEnum = makeEnum({
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  serviceDescription: 'serviceDescription',
  serviceDate: 'serviceDate',
  serviceCost: 'serviceCost',
  totalCost: 'totalCost',
  purchaseID: 'purchaseID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vehicleId: 'vehicleId',
  garageId: 'garageId'
});

exports.Prisma.SupplierScalarFieldEnum = makeEnum({
  supplierId: 'supplierId',
  supplierName: 'supplierName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  userId: 'userId',
  username: 'username',
  email: 'email',
  isAdmin: 'isAdmin',
  password: 'password'
});

exports.Prisma.VehicleScalarFieldEnum = makeEnum({
  vehicleId: 'vehicleId',
  plateNumber: 'plateNumber',
  model: 'model',
  modelYear: 'modelYear',
  chasisNubmer: 'chasisNubmer',
  purchaseDate: 'purchaseDate',
  purchaseMileAge: 'purchaseMileAge',
  disposalDate: 'disposalDate',
  vehicleStatus: 'vehicleStatus',
  departmentId: 'departmentId',
  location: 'location',
  reason: 'reason'
});

exports.Prisma.DriversScalarFieldEnum = makeEnum({
  driverId: 'driverId',
  driverName: 'driverName',
  phone: 'phone',
  licensNo: 'licensNo',
  description: 'description',
  driverStatus: 'driverStatus'
});

exports.Prisma.DeletedItemPartScalarFieldEnum = makeEnum({
  itemPart: 'itemPart',
  partName: 'partName',
  partQuantity: 'partQuantity',
  partPrice: 'partPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  supplierId: 'supplierId',
  garageId: 'garageId'
});

exports.Prisma.DrivingScalarFieldEnum = makeEnum({
  drivingId: 'drivingId',
  drivingDate: 'drivingDate',
  drivingDescription: 'drivingDescription',
  drivingStatus: 'drivingStatus',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  reason: 'reason'
});

exports.Prisma.DeletedServiceExpenseScalarFieldEnum = makeEnum({
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  serviceDescription: 'serviceDescription',
  serviceDate: 'serviceDate',
  serviceCost: 'serviceCost',
  totalCost: 'totalCost',
  purchaseID: 'purchaseID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vehicleId: 'vehicleId',
  garageId: 'garageId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  department: 'department',
  garage: 'garage',
  itemPart: 'itemPart',
  part: 'part',
  serviceExpense: 'serviceExpense',
  supplier: 'supplier',
  users: 'users',
  vehicle: 'vehicle',
  drivers: 'drivers',
  DeletedItemPart: 'DeletedItemPart',
  driving: 'driving',
  DeletedServiceExpense: 'DeletedServiceExpense'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
